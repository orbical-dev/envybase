name: Build and Publish Multi-Service Docker Images

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  # Use the repository owner and name for the base image name
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: core
            context: apps/core
            dockerfile: apps/core/Dockerfile
          - name: auth
            context: apps/auth
            dockerfile: apps/auth/Dockerfile
          - name: database
            context: apps/database
            dockerfile: apps/database/Dockerfile
          - name: func
            context: apps/function
            dockerfile: apps/function/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache npm for ${{ matrix.service.name }}
        if: matrix.service.name == 'core'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles(format('{0}/package-lock.json', matrix.service.context)) }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Extract metadata for ${{ matrix.service.name }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.service.name }}
          tags: |
            # Generates SemVer tag from the Git tag (e.g., 1.2.4 from tag 1.2.4 or v1.2.4)
            type=semver,pattern={{version}}
            # Tags the release as 'latest'
            type=raw,value=latest,enable={{is_default_branch}} # is_default_branch might not be true for release, make it always true for release
            # More robust way to ensure 'latest' is only for actual releases if that's intended:
            # type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            # For your specific request (always 'latest' on release):
            type=raw,value=latest

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
          platforms: linux/amd64,linux/arm64

  summary:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
    steps:
      - name: Build Summary
        run: |
          echo "## 🐳 Docker Images Built (Release: ${{ github.event.release.tag_name }})" >> $GITHUB_STEP_SUMMARY
          echo "| Service  | Status | Image                                                                 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-----------------------------------------------------------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Core     | ✅     | ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-core                     |" >> $GITHUB_STEP_SUMMARY
          echo "| Auth     | ✅     | ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-auth                     |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | ✅     | ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-database                 |" >> $GITHUB_STEP_SUMMARY
          echo "| Function | ✅     | ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-func                     |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tags created for each image (example for 'core', applies to all):" >> $GITHUB_STEP_SUMMARY
          echo "- \`$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')\` (version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`" >> $GITHUB_STEP_SUMMARY